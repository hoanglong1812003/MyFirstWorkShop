[
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/3-simulateattacks/3.1-compromisedec2instance/",
	"title": "Compromised EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Situation 1 One Monday morning, Long arrived at the office early, prepared a cup of coffee, sat down and opened his laptop, started his daily tasks such as sending E-mails, writing plans. Suddenly, Long started receiving a series of E-mails with content related to the latest discovery of threats, which Long had never seen before, but Long immediately started to learn and investigate. The good news is that his colleague, Viet, had set up automatic responses for those Findings so they were resolved immediately.\nSo what are the automatic responses that Viet has set up?\nThe first E-mail you Long received with the news that your EC2 instance may have been compromised is as follows:\nThe second E-mail you received shortly after with the situation being resolved is as follows:\nOverview Architecture A compromised EC2 instance sends pings to the EIP address of a malicious EC2 instance. That EIP address has been added to the Custom Threat List. Security Hub discovered an unusual security vulnerability. GuardDuty monitors VPC Flow Logs (including CloudTrail and DNS Logs) and analyzes the situation based on Machine Learning, Custom Threat Lists, and more. GuardDuty generates a Finding and displays it on the GuardDuty Console and sends this event to EventBridge Events. Based on this event, EventBridge Event Rule reacts and triggers the corresponding SNS Topic and Lambda Function simultaneously. SNS Topic will send you an E-mail with Finding details. The Lambda Function will isolate the EC2 compromised instance. When Viet set up the E-mail notification for this event, he only added certain information about the Finding and configured the Lambda Function to automatically isolate the EC2 compromised instance. Even though the Finding has been resolved, you still decide to dig deeper into Viet\u0026rsquo;s current settings and configuration.\nInvestigation process While you can see these Findings from the GuardDuty Console, most customers want to aggregate them from AWS Regions and AWS Accounts to a centralized security information management ( SIEM ) for analysis and remediation. The most common approach is to configure GuardDuty under an Admin/Member model and use a combination of EventBridge Event Rules and Lambda Functions to push these Findings to a SIEM or a Centralized Logging Framework . There are also a number of solutions from AWS partners that make it easier for customers to consolidate and push data.\nAccess to Security Hub at ap-southeast-1.\nWe will see security alerts in GuardDuty with Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom.\nProceed to access GuardDuty Console at ap-southeast-1.\nWe will see a Finding with the following format UnauthorizedAccess:EC2/MaliciousIPCaller.Custom.\nIf there is no Finding, please press refresh and wait. Users can access Findings in the GuardDuty console for 90 days.\nIn your environment, this type of Finding indicates that an EC2 instance is communicating with an IP address (that has been added to the Threat Lists). Select Lists in the navigation bar (left side) to see the Threat List that Viet added earlier Example-Threat-List. GuardDuty uses Threat Intelligence systems provided by AWS Security and third parties such as ProofPoint and CrowdStike. You can extend GuardDuty’s visibility by configuring your own Trusted IP Lists and Threat Lists. If you have set up GuardDuty in an Admin/Member structure, you can manage these lists from the GuardDuty Admin account and have Members inherit them. By default, Members do not have the ability to edit these lists.\nIn this simulation scenario, the EC2 compromised instance only accesses the EIP of another EC2 instance in the same VPC to internalize the simulation and data processing that only occurs in your environment. CloudFormation Templates automatically create Threat Lists and assign this EIP address to them.\nCheck EventBridge Event Rule\nViet uses EventBridge Event Rules to send you notifications about Findings along with the steps of the Remediations process. Let\u0026rsquo;s take a closer look to understand what Viet has set up and how this process works?\nAccess to EventBridge Console at ap-southeast-1. In the left navigation bar, under Events , select Rules. You\u0026rsquo;ll see three rules already set up (by CloudFormation Template), starting with a prefix like GuardDuty-Event.\nProceed to select the rule named GuardDuty-Event-EC2-MaliciousIPCaller.\nYou will easily notice that there are 2 targets in the Targets area. Lambda Function SNS Topic: Proceed to send E-mail notifications to you based on the data provided by EventBridge Event Rule. Instead of using the entire JSON data, by using Input Transformer , Viet has customized the notification content. Testing the Remediation process based on Lambda Function\nThe Lambda Function is the key that holds the logic to execute the Remediations steps for the Findings. Viet has set up a Lambda Function to remove and replace the Security Group of the EC2 compromised instance with a Security Group that does not contain any Ingress/Egress rules. This will help isolate the EC2 compromised instance from the current network.\nTo perform the Remediation process check:\nFrom the GuardDuty-Event-EC2-MaliciousIPCaller rule , in the Targets area , in the Type section is Lambda Function, we search for the corresponding Resource Name.\nIn the Lambda Function console, search for the Resource Name from the previous step.\nWe can consider some items\nConfiguration In the Designer bar, we can easily see the relationship with EventBridge Event Rule. In the Function code section, the coding logic will be executed here. Permissions. Monitoring. Confirming the Remediation Process Was Successful To ensure the success of the Remediation process, we need to check whether the EC2 instance has been isolated or not. At this point, you have received an E-mail with some important information.\nAccess the EC2 console at ap-southeast-1 at here. Select Instances, cwe will see 3 EC2 instances with prefix starting with the following format GuardDuty-Example. Based on instance ID from GuardDuty Finding or E-mail notification, we select the corresponding EC2 instance: GuardDuty-Example: Compromised Instance: Scenario 1. Once the Remediation process is complete, we will check the Security Group of this EC2 compromised instance, which will have a similar name format after ForensicSecurityGroup. ForensicSecurityGroup will not have any Ingress/Egress rules containing IP addresses in Example-Threat-List. "
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/",
	"title": "Detect threats with Amazon Security Hub &amp; Amazon GuardDuty",
	"tags": [],
	"description": "",
	"content": "Detect threats with Amazon Security Hub \u0026amp; Amazon GuardDuty Overview In this workshop, you will learn about Amazon GuardDuty combined with AWS Security Hub . Amazon GuardDuty is a service that detects and remediates threats to the system, while AWS Security Hub will provide us with a comprehensive view of priority security alerts and compliance status on AWS accounts. We will analyze, evaluate, and how to alert and fix security issues based on the \u0026ldquo;Findings\u0026rdquo; of GuardDuty and Security Hub.\nAbout GuardDuty Data Sources Once enabled in an AWS Region, GuardDuty analyzes all data coming from:\nVPC Flow Logs\nCloudTrail Logs\nDNS Logs\nDNS logs come from DNS resolvers (owned by AWS) for VPCs and are not directly accessible to users. If the DNS resolver is configured independently by yourself or by a third party, GuardDuty will not be able to retrieve, process and identify threats from this data source. GuardDuty can access any data sources (mentioned above) even if they are not previously enabled.\nYou should enable CloudTrail Logs and VPC Flow Logs at the same time to get the most comprehensive and detailed view when analyzing data.\nGuardDuty is a Regional service, so to be able to monitor data in an AWS Region, you must activate it in that AWS Region.\nYou can enable it through the AWS Console or using the APIs. Most users will enable it across all AWS Regions and AWS Accounts simultaneously through the APIs.\nRegardless of how many AWS resources you have (e.g. VPCs or IAM users), GuardDuty will not impact any of them because the processing will be performed internally within the GuardDuty service.\nGuardDuty is a fully managed service provided by AWS.\nGuardDuty\u0026rsquo;s pricing will be based on\nNumber of CloudTrail events analyzed. Volume of VPC floư logs (in GB) DNS log size (in GB) Each AWS account will have a 30-day trial period in each AWS Region, which will help GuardDuty easily predict the costs incurred.\nFindings GuardDuty will proactively observe and monitor for anomalies originating from:\n3 data sources (mentioned above)/ EC2 Instances. AWS IAM Resources. You can easily access the details of the Findings discovered by GuardDuty in the Findings tab. Each Finding is broken down into information in a format that allows us to easily understand and address security risks.\nLearn more about the full list of GuardDuty Findings series at here\nAbout AWS Security Hub AWS Security Hub gives you a comprehensive view of high-priority security alerts and compliance status across your AWS accounts.\nYou have a lot of powerful security tools at your disposal, from firewalls and endpoint protection to vulnerability scanning and security compliance. But sometimes, this leaves your team flipping back and forth between these tools to deal with hundreds or thousands of security alerts each day. With Security Hub, you now have a single place to aggregate, sort, and prioritize security alerts or findings from multiple AWS services (such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie) or AWS partner solutions.\nThe risks found are visually summarized on a built-in dashboard with interactive charts and tables. You can also continuously monitor your system using automated compliance checks against AWS best practices and market standards that your business follows.\nExpense Typically, it will cost less than $1 per month if your account is only used for testing, training, and not for performing simulated attacks.\nSecurity Check\nFirst 100,000 =\u0026gt; $0.0010/check 100,001 – 500,000 =\u0026gt; $0.0008/check 500,001+ =\u0026gt; $0.0005/check Find attack events\nFirst 10,000 times =\u0026gt; free 10,001+ =\u0026gt; $0.00003/time Comparing Amazon GuardDuty and AWS Security Hub Criteria Amazon GuardDuty AWS Security Hub Main purpose PAutomated threat detection based on behavior and machine learning. Aggregate, standardize, and evaluate security alerts from multiple sources. Data processing VPC Flow Logs, CloudTrail Events, DNS logs. logs Alerts from GuardDuty, Inspector, IAM Access Analyzer,… How it works Log analysis, using AI and threat intel to detect anomalies. Collect and standardize alerts according to ASFF standards. Event response Send alert to CloudWatch, trigger Lambda Allows creation of Custom Actions, integration with Lambda, EventBridge Warning standard Private internal format. AWS Security Finding Format (ASFF). Advantage No agent installation required, real-time, automatic detection. Comprehensive synthesis, integrating multiple sources, supporting Best Practice. Disadvantages No aggregate reporting, may generate false alarms. Depending on other warning sources, information overload may occur. It is possible to combine both : use GuardDuty to detect threats, then send findings to Security Hub for aggregation, assessment, and response.\nContent Introduce Preparation steps Simulate attacks Clean up resources "
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/2-prerequiste/2.1-enableguardduty/",
	"title": "Enable GuardDuty",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to enable GuardDuty before creating the Stack.\nDeployment Enable GuardDuty\nSign in to AWS Console, access the service GuardDuty. Start by selecting Get started For new accounts, AWS will give us a 30-day trial, to start using it, click the Enable GuardDuty button. After activating GuardDuty, we will proceed to activate Security Hub.\n"
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview In this lab, you will learn about Amazon GuardDuty combined with AWS Security Hub . Amazon GuardDuty is a service that detects and remediates threats to the system, while AWS Security Hub will provide us with a comprehensive view of priority security alerts and compliance status on AWS accounts. We will analyze, evaluate, and how to alert and fix security issues based on the \u0026ldquo;Findings\u0026rdquo; of GuardDuty and Security Hub.\nAbout GuardDuty Data Sources Once enabled in an AWS Region, GuardDuty analyzes all data coming from:\nVPC Flow Logs\nCloudTrail Logs\nDNS Logs\nDNS logs come from DNS resolvers (owned by AWS) for VPCs and are not directly accessible to users. If the DNS resolver is configured independently by yourself or by a third party, GuardDuty will not be able to retrieve, process and identify threats from this data source. GuardDuty can access any data sources (mentioned above) even if they are not previously enabled.\nYou should enable CloudTrail Logs and VPC Flow Logs at the same time to get the most comprehensive and detailed view when analyzing data.\nGuardDuty is a Regional service, so to be able to monitor data in an AWS Region, you must activate it in that AWS Region.\nYou can enable it through the AWS Console or using the APIs. Most users will enable it across all AWS Regions and AWS Accounts simultaneously through the APIs.\nRegardless of how many AWS resources you have (e.g. VPCs or IAM users), GuardDuty will not impact any of them because the processing will be performed internally within the GuardDuty service.\nGuardDuty is a fully managed service provided by AWS.\nGuardDuty\u0026rsquo;s pricing will be based on\nNumber of CloudTrail events analyzed. Volume of VPC floư logs (in GB). DNS log size (in GB). Each AWS account will have a 30-day trial period in each AWS Region, which will help GuardDuty easily predict the costs incurred.\nFindings GuardDuty will proactively observe and monitor for anomalies originating from:\n3 data sources (mentioned above). EC2 Instances. AWS IAM Resources. You can easily access the details of the Findings discovered by GuardDuty in the Findings tab. Each Finding is broken down into information in a format that allows us to easily understand and address security risks.\nLearn more about the full list of GuardDuty Findings series at here.\nAbout AWS Security Hub AWS Security Hub gives you a comprehensive view of high-priority security alerts and compliance status across your AWS accounts.\nYou have a lot of powerful security tools at your disposal, from firewalls and endpoint protection to vulnerability scanning and security compliance. But sometimes, this leaves your team flipping back and forth between these tools to deal with hundreds or thousands of security alerts each day. With Security Hub, you now have a single place to aggregate, sort, and prioritize security alerts or findings from multiple AWS services (such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie) or AWS partner solutions.\nThe risks found are visually summarized on a built-in dashboard with interactive charts and tables. You can also continuously monitor your system using automated compliance checks against AWS best practices and market standards that your business follows.\nExpense Typically, it will cost less than $1 per month if your account is only used for testing, training, and not for performing simulated attacks.\nSecurity Check\nFirst 100,000 =\u0026gt; $0.0010/check. 100,001 – 500,000 =\u0026gt; $0.0008/check. 500,001+ =\u0026gt; $0.0005/check. Find attack events\nFirst 10,000 times =\u0026gt; free. 10,001+ =\u0026gt; $0.00003/time. Comparing Amazon GuardDuty and AWS Security Hub Criteria Amazon GuardDuty AWS Security Hub Main purpose PAutomated threat detection based on behavior and machine learning. Aggregate, standardize, and evaluate security alerts from multiple sources. Data processing VPC Flow Logs, CloudTrail Events, DNS logs. logs Alerts from GuardDuty, Inspector, IAM Access Analyzer,… How it works Log analysis, using AI and threat intel to detect anomalies. Collect and standardize alerts according to ASFF standards. Event response Send alert to CloudWatch, trigger Lambda Allows creation of Custom Actions, integration with Lambda, EventBridge Warning standard Private internal format. AWS Security Finding Format (ASFF). Advantage No agent installation required, real-time, automatic detection. Comprehensive synthesis, integrating multiple sources, supporting Best Practice. Disadvantages No aggregate reporting, may generate false alarms. Depending on other warning sources, information overload may occur. It is possible to combine both : use GuardDuty to detect threats, then send findings to Security Hub for aggregation, assessment, and response.\nContent Introduce Preparation steps Simulate attacks Clean up resources "
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/3-simulateattacks/3.2-compromisediamcredentials/",
	"title": "Compromised IAM credentials",
	"tags": [],
	"description": "",
	"content": "Scenario 2: Compromised IAM credentials Long completed the first attack simulation scenario and returned to his coffee. However, he continued to receive new notifications about Findings related to AWS IAM services. The first notification content indicated that, using IAM credentials, some API calls were made from the IP address that was added to the Threat List (in the previous post).\nNo personal IAM credentials have ever been exposed or disclosed in any way.\nOverview Architecture This EC2-malicious instance is making API calls , the EIP of this instance has been added to the Threat List. The content of the API calls has been recorded in the CloudTrail log. Security Hub detects suspicious actions detected by GuardDuty GuardDuty looks at CloudTrail Logs along with VPC Flow Logs and DNS Logs , and assesses the situation based on certain baselines. GuardDuty generates the corresponding Findings and simultaneously sends the details to the GuardDuty Console and EventBridge Events . EventBridge Event Rule triggers the SNS Topic. SNS Topic proceeds to send E-mail notifications with relevant information. Investigation process To proceed with reviewing the Findings:\nVisiting Security Hub, we discovered a security vulnerability discovered by GuardDuty. Access the GuardDuty Console at ap-southeast-1 at here.\nWe will see the Findings in the following format.\nRecon:IAMUser. UnauthorizedAccess:IAMUser. If there is no Finding, press the Refresh button and wait. From Finding Recon:IAMUser/MaliciousIPCaller.Custom, we can easily retrieve some of the following information: What happened? Which AWS resources are affected? When did this event happen? Under Resource Affected section, you will find the User Name that is related to this Finding. This finding indicates that the IAM credential of the above User Name may have been exposed by API calls originating from the IP address that was previously added to the Threat List .\nSo what actions did this IAM User perform?\nIn the Action section, we see that the DescribeParameters action has been performed.\nHow can we see all the remaining actions, performed by this IAM User, within the last 1 hour or 1 day?\nGuardDuty is capable of analyzing large amounts of data to accurately identify the hazards present in your environment. However, during the investigation and remediation steps, we also need to combine different data sources to get the most correlated view possible.\nIn this case, the analyst can use the insights that can be found in user behavior logs via CloudTrail.\nFindings about IAM generated by malicious EC2 instance making API calls and EIP of this instance is in Custom Threat List.\nCheck EventBridge Event Rule\nAccess the EventBridge Event Rule Console at ap-southeast-1. In the left navigation bar, under Events , select Rules . You\u0026rsquo;ll see three rules already set up (by CloudFormation Template), starting with a prefix like GuardDuty-Event\u0026hellip; Proceed to select the rule named GuardDuty-Event-IAMUser-MaliciousIPCaller You will easily notice that there is only 1 target in the Targets area , which is SNS Topic. As it turns out, Viet never set up a Lambda Function to perform the Remediation process because the Security team decided that they would do this Finding manually.\nThe combination of GuardDuty, Security Hub, and EventBridge Events provides the flexibility to easily create an automated Remediation process. Lambda functions or AWS partner solutions are top choices.\nFor certain Findings, we may just configure notifications and resolve issues manually, instead of automating. Because when designing the automation process, we will have to be very careful and evaluate the results that the Remediation process brings, including both advantages and disadvantages.\nAdditionally, we can set Target for some other AWS resources like SSM Run Commands or Step Function State Machine.\nResolving the situation Since Viet has never set up a Remediation process for this Finding, Long needs to do it manually. While the Security team is analyzing the behavior of this IAM user to better determine the scope of the vulnerability, Long needs to take some steps to disable the Access Key to immediately prevent further actions.\nAccess the IAM Console at here In the left navigation bar, select Users. Based on GuardDuty Finding and E-mail notification, we can easily select the IAM user - GuardDuty-Example-Compromised-Simulated. In user GuardDuty-Example-Compromised-Simulated, we select the Security Credentials tab . In the Access Keys section, based on the Access Key ID information from Finding, we proceed to select Action -\u0026gt; Deactivate . "
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/3-simulateattacks/3.3-createfindings/",
	"title": "Create Findings",
	"tags": [],
	"description": "",
	"content": "Situation 3:: Long has just realized that the recent attacks are simulated attacks, the Findings are automatically generated from CloudFormation Template to review the security capabilities of Security Hub and GuardDuty. However, the security risk still exists, a hacker named Bao has successfully retrieved the temporary IAM security credential generated by the IAM role of EC2 instance. So how did this hacker retrieve it?\nRetrieve temporary IAM security credentials with Systems Manager\nTo perform this final attack, Bao needs to successfully retrieve the temporary IAM security credential generated by the IAM role of the EC2 instance. Bao can try one of the following two ways:\nSSH into EC2 instance and query EC2 instance Metadata data. Use the Session Manager functionality of the AWS System Manager service. We will proceed to create the Findings\nAccess the Session Manager at ap-southeast-1. In the right hand navigation bar, select Start Session. In the Target instances section we will see a managed EC2 instance with the following name format - GuardDuty-Example: Compromised Instance: Scenario 3 with SSM Agent ping status as Online. Select instance GuardDuty-Example: Compromised Instance: Scenario 3 and press Start session. Execute the Metadata query statement:\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/GuardDuty-Example-EC2-Compromised Open notepad, take notes of some important information below:\nAccess Key ID Secret Access Key Session Token Create AWS CLI Profile on your PC After successfully retrieving the temporary IAM security credential, we will proceed to create an AWS CLI Profile on our personal computer. From Terminal/CMD/PowerShell, we proceed to replace the values ​​with the specific values ​​we collected, then enter the following commands:\naws configure set profile.iamhacker.region ap-southeast-1 aws configure set profile.iamhacker.aws_access_key_id \u0026lt;ACCESS_KEY_ID\u0026gt; aws configure set profile.iamhacker.aws_secret_access_key \u0026lt;SECRET_ACCESS_KEY\u0026gt; aws configure set profile.iamhacker.aws_session_token \u0026lt;SESSION_TOKEN\u0026gt; We can use the following command to quickly check if there is an AWS CLI Profile named iamhacker\naws configure --profile iamhacker Execute AWS CLI commands using temporary IAM security credentials Using the AWS CLI commands below, we make API calls to different AWS services.\nWhat permissions does an IAM user have?\naws iam get-user --profile iamhacker aws iam create-user --user-name BuiChiBao --profile iamhacker So IAM user can not get-user nor create-user\nIs there access to DynamoDB?\naws dynamodb list-tables --profile iamhacker aws dynamodb describe-table --table-name GuardDuty-Example-Customer-DB --profile iamhacker Is there any access to DynamoDB data?\naws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile iamhacker aws dynamodb delete-table --table-name GuardDuty-Example-Customer-DB --profile iamhacker aws dynamodb list-tables --profile iamhacker This way the hacker has access and can query data to DynamoDB.\nIs it possible to access the System Manager Parameter Store?\naws ssm describe-parameters --profile iamhacker aws ssm get-parameters --names \u0026quot;gd_prod_dbpwd_sample\u0026quot; --profile iamhacker aws ssm get-parameters --names \u0026quot;gd_prod_dbpwd_sample\u0026quot; --with-decryption --profile iamhacker aws ssm delete-parameter --name \u0026quot;gd_prod_dbpwd_sample\u0026quot; --profile iamhacker This gives the hacker access to the System Manager Parameter Store.\n"
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/3-simulateattacks/3.4-credential-exfiltration/",
	"title": "Credential Exfiltration",
	"tags": [],
	"description": "",
	"content": "Overview Architecture Retrieve temporary IAM security credentials with Systems Manager\nRemote server accesses compromised EC2 instance and steals IAM role credentials via Metadata. This server sets up an AWS CLI Profile to make API calls to an AWS account. Security Hub detects anomalies GuardDuty generates relevant Findings and simultaneously sends them to GuardDuty console and EventBridge Events. EventBridge Event Rule triggers SNS Topic and Lambda Function. SNS Topic proceeds to send E-mail notification with Finding details. Lambda Function then assigns a new policy to revoke all active Sessions. Investigation process Access Security Hub, we see High Findings detected by GuardDuty. Access GuardDuty Console We will see Findings with the following format UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration. If there is no Finding, press the Refresh button and wait. From Finding UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration, c we can easily retrieve some of the following information: High Severity Notice that someone is trying to use IAM role credential outside EC2 instance Each GuardDuty Finding will be assigned a specific severity level - Low/Medium/High. These levels are defined by AWS and are used to classify and identify.\nCheck EventBridge Event Rule\nCheck EventBridge Event Rule EventBridge Event Rule at ap-southeast-1. In the left navigation bar, under Events , select Rules. You\u0026rsquo;ll see three rules already set up (by CloudFormation Template), starting with a prefix like GuardDuty-Event... Proceed to select the rule named GuardDuty-Event-IAMUser-InstanceCredentialExfiltration. In the Event Pattern section, we can easily see the data source that this Event will record and activate the Targets when any event occurs. You can create an EventBridge Event Rule to record events of a specific Finding type or any Finding type.\nTest the Remediation process with Lambda Function\nViet has set up a Remediation process to respond to this threat automatically through a Lambda function. We can examine the code to understand more about this process.\nAccess Lambda Console to ap-southeast-1. 2.In the left navigation bar, select Functions and search for GuardDuty-Example-Remediation-InstanceCredentialExfiltration. Basically, this Lambda function will retrieve information about IAM Role from Finding and proceed to add IAM Policy.\nVerify the Remediation process\nTo verify whether Finding InstanceCredentialExfiltration has been completely resolved, we will proceed with the following steps.\nVerify via AWS CLI Execute the following command:\naws dynamodb list-tables --profile iamhacker We will get the return result will be AccessDeniedException for the executed statement.\n"
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/2-prerequiste/2.2-enablesecurityhub/",
	"title": "Enable Security Hub",
	"tags": [],
	"description": "",
	"content": "Enable Security Hub In this step we will activate Security Hub so that users have a more comprehensive view of security warnings.\nSign in to AWS Console Access to AWS Security Hub service administration interface. Select Security Hub CSPM, then click Get started. On the Enable AWS Security Hub CSPM page, select security standards such as AWS Foundational Security Best Practices, CIS AWS Foundations Benchmark, and PCI DSS. Select Enable Security Hub. Once activated, you will need to wait a period of time for Security Hub to evaluate your current account\u0026rsquo;s Security Score against each set of security standards you set. "
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/2-prerequiste/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "Overview In the next steps, we will proceed to enable GuardDuty, Security Hub and create Stack.\nSituation The exercise will describe the following situations.\nOrder Name Specification Solutions 1 Compromised EC2 Instance Detect and recover attacked EC2 instances. Combining Amazon GuardDuty , Amazon EventBridge Event Rules , and AWS Lambda 2 Compromised IAM credentials Identify an individual actively making API calls to a system on AWS. Fix this threat immediately (manually) 3 IAM role exfiltration Through a leaked credential, an individual is trying to break in and call an API from an external server. Remediation with AWS Lambda Content Enable GuardDuty Enable Security Hub Create Stack "
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/2-prerequiste/2.3-createstack/",
	"title": "Create Stack",
	"tags": [],
	"description": "",
	"content": "Create Stack In this step we will create a Stack to monitor and prevent attacks through Findings on GuardDuty.\nSign in to AWS Console. Access to CloudFormation Service Administration Interface. Proceed to create a new Stack by pressing the Create stack. On the Specify template page, click Upload a template file Download template file at here\nOn the Parameters page, we will enter some required information: Email Address: Your email address. Click Next. On the Specify Stack Details page, click Next. On the Configure stack options page, click Next. On the Capabilities page, accept (Acknowledge) to allow the Template to create IAM roles, and finally select the Create Stack button. Check the information again, press Submit The above process will take place within 5-10 minutes until we see the status of the Stack as CREATE_COMPLETE. After that, we will receive an Email notification with the same subject as AWS Notification - Subscription Confirmation.\nResources prepared EC2 Services: 2 instances called Compromised Instance. 1 instance called Malicious Instance. IAM Services: 1 IAM Role for EC2 instance with access to SSM Parameter Store and DynamoDB. SNS Services: 1 SNS Topic sends notifications via E-mail. EventBridge Services: 3 EventBridge Events Rules for triggering notifications and remediation. Lambda Service: 2 Lambda Functions proceed to fix the vulnerabilities. SSM Services: 1 SSM Parameter Store is used to store passwords for the TESTING environment. "
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/3-simulateattacks/",
	"title": "Simulate attacks",
	"tags": [],
	"description": "",
	"content": "In this step, we will observe and implement the necessary security protocols with 3 simulated attack scenarios. From there, we will see security warnings on Security Hub and GuardDuty will proactively prevent attacks through pre-prepared resources (Lambda function, EventBridge Rules, SNS Topic, \u0026hellip;).\nNội dung 3.1. Compromised EC2 Instance 3.2. Compromised IAM credentials 3.3. Create Findings 3.4 Credential Exfiltration\n"
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/4-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will follow these steps to delete the resources we created in this lab.\nDelete S3 Bucket Access S3 Bucket Empty the newly created S3 Buckets Delete S3 Buckets. Delte IAM Role Access IAM Role Search GuardDuty-Example-EC2-Compromised Delete Disable Amazon GuardDuty Access Amazon GuardDuty Click on Setting Select Disable GuardDuty Click Save Disable Security Hub Access Security Hub On the left sidebar, select Setting. In Settings select General. Scroll down, select Disable AWS Security Hub CSPM. Delete Stack Access CloudFormation Select the newly created Stack Delete If deletion fails, please review S3 Bucket deletion and IAM Role deletion.\n"
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hoanglong1812003.github.io/MyFirstWorkShop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]